# Protocol file for Keithley DAQ6510 data acquisition and multimeter system

Terminator = LF;
#ReadTimeout = 200;

ReplyTimeout = 5000;



P = "CstatV-AC:";
DEV = "DAQ6510";

get_id {
   out "*idn?";
   in "%#s";
   @init { out "*idn?";
   	 in "%#s"; }
}

get_err {
   out "syst:err?";
   in "%(" $P $DEV ":SystErr)#s";
}

setting_poweron {
   out ":syst:pos %s";
   @init { out ":syst:pos?";
   	 in "%s"; }
}

reset {
   out "*RST";
   
   out "syst:err?";
   in "0,\"No error;0;0 0\"";
   @mismatch {in "%(" $P $DEV ":SystErr)#s";}  
}

# Sets the scanning type of a channel and adds the channel to the scan

set_up_scan {
   out ":FUNCtion 'TEMPerature', (@\$1)";
   out ":SENSe:TEMPerature:TRANsducer FRTD, (@\$1)";
   out ":SENSe:TEMPerature:RTD:FOUR PT100, (@\$1)";
   out ":ROUTe:SCAN:ADD (@\$1)";
  
   out "syst:err?";
   in "0,\"No error;0;0 0\"";
   @mismatch {in "%(" $P $DEV ":SystErr)#s";} 
}

#Starts the scan (NB only one reading), saves the setting in sav1 and retrieves the size of the current data buffer

start_scan {
   out ":ROUTe:SCAN:COUNt:SCAN 1";
   out ":ROUTe:SCAN:RESTart ON";
   out "*SAV 1";
   out ":INIT";
   out "*WAI";

   out "syst:err?";
   in "0,\"No error;0;0 0\"";
   @mismatch {in "%(" $P $DEV ":SystErr)#s";} 

   out ":trac:act:end?";
   in "%(" $P $DEV ":lastIndex)i";

   #out ":trac:data? 1, %(" $P $DEV ":lastIndex)i, \"defbuffer1\", CHAN,READ";
   #in "%(" $P $DEV ":testRead)s"
}

#retrieves the last buffer reading in the form <Channel>,<Reading>,...

read {
   out ":trac:data? 1, %(" $P $DEV ":lastIndex)i, \"defbuffer1\", CHAN,READ";
   in "%#/(^\$1,)|(.*\$1,)/\$1,/\$1,%f%*#s";
   @replytimeout {get_err;}
}

