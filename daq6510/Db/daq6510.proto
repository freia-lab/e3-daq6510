# Protocol file for Keithley DAQ6510 data acquisition and multimeter system

Terminator = LF;
#ReadTimeout = 200;

ReplyTimeout = 5000;

get_id {
   out "*idn?";
   in "%#s";
   @init { out "*idn?";
   	 in "%#s"; }
}

get_err {
   out "syst:err?";
   in "%(\$1:SystErr)#s";
}

setting_poweron {
   out ":syst:pos %s";
   @init { out ":syst:pos?";
   	 in "%s"; }
}

reset {
   out "*RST";
   
   out "syst:err?";
   in "0,\"No error;0;0 0\"";
   @mismatch {in "%(\$1:SystErr)#s";}  
}

recall {
   out "*RCL \$1";
   
   out "syst:err?";
   in "0,\"No error;0;0 0\"";
   @mismatch {in "%(\$2:SystErr)#s";}  
}


# Sets the scanning type of a channel and adds the channel to the scan

set_up_scan {
   out ":FUNCtion 'TEMPerature', (@\$1)";
   out ":SENSe:TEMPerature:TRANsducer FRTD, (@\$1)";
   out ":SENSe:TEMPerature:RTD:FOUR PT100, (@\$1)";
   out ":ROUTe:SCAN:ADD (@\$1)";
  
   out "syst:err?";
   in "0,\"No error;0;0 0\"";
   @mismatch {in "%(\$2:SystErr)#s";} 
}

#Starts the scan (NB only one reading), saves the setting in sav1 and retrieves the size of the current data buffer

finish_setup {
   out ":ROUTe:SCAN:COUNt:SCAN 1";
   out ":ROUTe:SCAN:RESTart ON"; #If power is lost during the scan, when power is restored, the scan restarts.
   out "*SAV 1";
   out ":syst:pos SAV1"; #If power is lost in between scans, the settings will be called when power is restored.
   out "*WAI";
}

start_scan {
   out ":INIT";
   out "*WAI";

   out "syst:err?";
   in "0,\"No error;0;0 0\"";
   @mismatch {in "%(\$1:SystErr)#s";} 

   out ":trac:act:end?";
   in "%(\$1:lastIndex)i";

   #out ":trac:data? 1, %(" $P $DEV ":lastIndex)i, \"defbuffer1\", CHAN,READ";
   #in "%(\$1:testRead)s"
}

#retrieves the last buffer reading in the form <Channel>,<Reading>,...

read {
   out ":trac:data? 1, %(\$2:lastIndex)i, \"defbuffer1\", CHAN,READ";
   in "%#/(^\$1,)|(.*\$1,)/\$1,/\$1,%f%*#s";
#   @replytimeout {get_err;}
}
readSEC {
   out ":trac:data? 1, %(\$2:lastIndex)i, \"defbuffer1\", CHAN,SEC";
   in "%#/(^\$1,)|(.*\$1,)/\$1,/\$1,%i%*#s";
#   @replytimeout {get_err;}
}
readSTAT {
   out ":trac:data? 1, %(\$2:lastIndex)i, \"defbuffer1\", CHAN,STAT";
   in "%#/(^\$1,)|(.*\$1,)/\$1,/\$1,%i%*#s";
#   @replytimeout {get_err;}
}

# Get the number of times the relays has been closed

get_close_count {
   out ":rout:clos:coun? (@101:140)";
   separator=","; 
   in "%i"; 
}
